name: iOS SPM Build and Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: macos-latest
    env:
      SCHEME: NetworkLayer
      DERIVED_DATA: ${{ github.workspace }}/DerivedData

    steps:
      - uses: actions/checkout@v4

      # Usar Xcode 16.2
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Print Xcode version
        run: |
          xcodebuild -version
          xcode-select -p

      # Instalar SwiftLint desde Homebrew
      - name: Install SwiftLint via Homebrew
        shell: bash
        run: |
          set -euo pipefail
          brew update
          brew install swiftlint
          swiftlint version

      # Lint estricto
      - name: SwiftLint (lint --strict)
        shell: bash
        run: swiftlint lint --strict

      # Crear simulador con último runtime iOS disponible
      - name: Create iOS Simulator (latest runtime)
        shell: bash
        run: |
          set -euo pipefail
          # Buscar último runtime iOS disponible
          RUNTIME_ID=$(xcrun simctl list runtimes | awk -F'[()]' '/iOS/{print $2}' | tail -1)
          if [[ -z "$RUNTIME_ID" ]]; then
            echo "::error::No iOS runtime found."
            exit 1
          fi
          echo "Using runtime: $RUNTIME_ID"

          # Elegir tipo de dispositivo (iPhone 15 Pro si existe)
          TYPE_ID=$(xcrun simctl list devicetypes | awk -F'[()]' '/iPhone 15 Pro$/{print $2; exit}')
          if [[ -z "$TYPE_ID" ]]; then
            TYPE_ID=$(xcrun simctl list devicetypes | awk -F'[()]' '/iPhone [0-9]+( Pro| Pro Max)?$/{print $2; exit}')
          fi
          echo "Using device type: $TYPE_ID"

          # Crear simulador
          UDID=$(xcrun simctl create "CI iPhone" "$TYPE_ID" "$RUNTIME_ID")
          echo "Simulator UDID: $UDID"

          # Exportar destino
          echo "DESTINATION=id=${UDID}" >> "$GITHUB_ENV"

      - name: Run tests on iOS Simulator
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild \
            -destination "$DESTINATION" \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -derivedDataPath "$DERIVED_DATA" \
            test
